---
name: cs102-F2020-practical3
break: true
indent: 4
---

# Learn more about GatorGrader and its supported checks by visiting this web site:
# https://github.com/GatorEducator/gatorgrader

# Explanation:
# --> a check without an "--exact" runs a count for an entity as an "at least"
# --> checks below a file in a specified directory are for that specific file and directory
# --> checks that appear stand-alone are for an entire Git repository

# --> check the Python program
factorialmaker/factorialmaker/__main__.py:
    ConfirmFileExists
    MatchFileFragment --fragment "TODO" --count 0 --exact
    CountMultipleLineComments --language Python --count 2
    CountSingleLineComments --language Python --count 4

# --> check the Python program
factorialmaker/factorialmaker/factorial.py:
    ConfirmFileExists
    MatchFileFragment --fragment "TODO" --count 0 --exact
    CountMultipleLineComments --language Python --count 2
    CountSingleLineComments --language Python --count 7

# --> check the Python program
factorialmaker/tests/test_factorial.py:
    ConfirmFileExists
    MatchFileFragment --fragment "TODO" --count 0 --exact
    CountMultipleLineComments --language Python --count 6

# --> check the technical writing for various characteristics
writing/reflection.md:
    ConfirmFileExists
    CountFileWords --count 400
    CountMarkdownTags --tag "heading" --count 10 --exact
    CountMarkdownTags --tag "code" --count 2
    CountMarkdownTags --tag "code_block" --count 3 --exact
    MatchFileFragment --fragment "TODO" --count 0 --exact
    MatchFileFragment --fragment "Add Your Name Here" --count 0 --exact

# --> check that the number of commits in the Git repository is beyond a threshold
CountCommits --count 5

# # --> check that the program executes correctly and produces correct number of lines of output
ExecuteCommand --command "cd factorialmaker; poetry install; poetry run python factorialmaker --iterative --number 5; cd .."

# Output of the Python Program:
#
# Calculating 5! and returning all numbers in the computation of 5! ðŸ›«

  # Should I use an iterative function? Yes

  # Here is the output from the iterative function.

   # Factorial values for 5! = [(1, 1), (2, 2), (3, 6), (4, 24), (5, 120)]
   # Unpacking at end of list to determine 5! = 120
   # The returned ordered pair shows that 5! = 120

# Wow, computing factorial numbers is demanding! ðŸ˜‚
